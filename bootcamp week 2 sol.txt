Given a list of strings, write a program to find the number of strings whose length is greater than or equal to K, where K is a positive integer.
Input - List of strings and an integer

Output - Integer
Sample Input :

[Mumbai, Hyderabad, Calicut, Chennai]

9 Sample Output: 1


#input_str = sys.stdin.read()
input_list = ast.literal_eval(input())
inp_num = int(input())
#print(inp_num)

sum1 = 0
for i in input_list:
    #print(i)
    #print (len(i))
    if len(i) >= inp_num:
        sum1 = sum1+1
        #print(sum1)
        
print(sum1)
#start writing your code here

############################################################################

Increment list elements
Description
Given a list of strings, increment the value of the numeric strings by 'k’. 

Hint: The function isdigit() may be useful here.

Input - A list in the first line and an integer in the second line

Output - A list

Sample Input :
['Python', '123', 'Data']
  4
Sample Output : ['Python', '127', 'Data']


import ast
input_list = ast.literal_eval(input())
K = int(input())

extra = 0
output_list=[]
for i in input_list:
    if i.isdigit():
        extra= int(i)+K
        output_list.append(str(extra))
    else:
        output_list.append(i)

########################################################################################

Description
Given a list of strings and an integer K, write a python code to print all the elements from the K th position till the end of the list.
Note: Assume that K (a positive integer) will always be less than or equal to the length of the list
Input - A list of strings in the first line and an integer in the second line of the input.
Output - A list
--------------------------------------------------------------------------------------------------------
Sample Input :
['Mumbai', 'Delhi', 'Australia', 'Nigeria', 'USA', 'London', 'Canada']
2
Sample Output : ['Delhi', 'Australia', 'Nigeria', 'USA', 'London', 'Canada']

import ast
input_list = ast.literal_eval(input())
K = int(input())

output_list= []
for i in range(K-1, len(input_list)):
    output_list.append(input_list[i])

print(output_list)

##############################################################################################################


Substring with maximum uppercase characters
Description
Given a string, write a Python program to find the largest substring of uppercase characters and print the length of that substring. Check the sample inputs and outputs for a better understanding.
---------------------------------------------------------------------------------------------------
Input - String
Output - String
---------------------------------------------------------------------------------------------------
Sample Input - I lovE PRogrAMMING
Sample Output - 6

#Take input here
test_str = input()
#test_str = 'I love PrograMMING and'
#print(test_str)
#Write the code here
count =0
lst = []
for i in range(0,len(test_str)):
    #print(i, test_str[i])
    if (ord(test_str[i]) >= 65 and ord(test_str[i])<= 90):
        count= count +1
    else:
        count = 0 
    lst.append(count)

print(max(lst))


#############################################################################################

Sorting list of tuples
Description
A class of students attempt an exam in two parts: ‘Aptitude’ and ‘Physics'. The marks of all the students are stored as a list of tuples, and each student’s marks (in Aptitude and Physics) are stored in each tuple. Your task is to write a Python program to sort the list of tuples in decreasing order of the Physics scores of the students.
Note - Marks of both the subjects are ranged between 1-100, and no two students have scored the same marks in Physics.
---------------------------------------------------------------------------------------------------
Input - List of tuples
Output - List of tuples
---------------------------------------------------------------------------------------------------
Sample Input - [(45,77), (88,87), (67,98), (33,31)]
In (45,77), which is the first element in the list, 45 and 77 are the scores of a student in aptitude and physics respectively.
Sample Output - [ (67,98), (88,87), (45,77),(33,31)]

import ast
input_list = ast.literal_eval(input())
#print(input_list)

l = len(input_list)
for i in range(0,l):
    for j in range(0,i):
        if input_list[i][1] > input_list[j][1]:
            input_list[i], input_list[j] = input_list[j], input_list[i]
            
        
print(input_list)

###############################################################################################

Description
Given an integer ‘n’, your task is to write a Python code to find whether ‘n’ is divisible by all its digits or not. If they divide the number, then the number ‘n’ is a happy number. Otherwise, it is a sad number.

The number ‘n’ may be provided with commas. At first, you have to clean the number (by removing the commas involved) and then check whether the number is happy or sad.

# Take input as a string

input_list = input()

inp=''
for i in input_list:
    if i.isdigit():
        inp=inp+i


lst=list(str(inp))
count = 0
for i in lst:
    if (int(inp) % int(i) != 0 ):
        count = count +1 
    
if (count ==0):
    print ('Happy Number')
else:
    print ('Sad Number')

#####################################################################################################

#Take input here
#we will take input using ast sys
import ast
#reading the input dictionary
input_dictionary = input()
convert_dictionary = ast.literal_eval(input_dictionary)

#reading the input list
input_list = input()
convert_list = ast.literal_eval(input_list)

#Write code here
for i in range(len(convert_list)):
    if convert_list[i][0] in convert_dictionary.keys():
        convert_dictionary[convert_list[i][0]] = convert_list[i][1]

print(convert_dictionary)

#######################################################################################################

#Take input from here
import ast
grp_avg = ast.literal_eval(input())
ind_score = ast.literal_eval(input())
#Write the code here

#print (len(grp_avg))
#print(ind_score)
#print(len(grp_avg))
count=0
for i in range(len(grp_avg)):
    if (float(grp_avg[i]) > float(ind_score[i])):
        count= count +1
if (count>2):
    print('Rejected')
else:
    print('Selected')
    
 ###############################################################################################################
 
 
